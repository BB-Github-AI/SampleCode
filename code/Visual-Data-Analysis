{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<center>\n",
    "<img src=\"https://habrastorage.org/webt/ia/m9/zk/iam9zkyzqebnf_okxipihkgjwnw.jpeg\">\n",
    "    \n",
    "## [mlcourse.ai](mlcourse.ai) â€“ Open Machine Learning Course \n",
    "\n",
    "Author: [Yury Kashnitskiy](https://yorko.github.io). \n",
    "Translated and edited by [Maxim Keremet](https://www.linkedin.com/in/maximkeremet/), [Artem Trunov](https://www.linkedin.com/in/datamove/), and [Aditya Soni](https://www.linkedin.com/in/aditya-soni-0505a9124/). This material is subject to the terms and conditions of the [Creative Commons CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/) license. Free use is permitted for any non-commercial purpose."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# <center> Assignment #2. <br> Visual data analysis in Python: EDA of US flights <br> (using Pandas, Matplotlib & Seaborn & Plotly)\n",
    "\n",
    "<img src='../../img/flight.png' width=50%>\n",
    "\n",
    "\n",
    "* **Your task** is to write code and perform computations in the cells below\n",
    "\n",
    "* **Deadline for A2**: 2020 April 07, 23:59 PM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-04-01T21:29:26.251609Z",
     "start_time": "2020-04-01T21:29:25.701685Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "        <script type=\"text/javascript\">\n",
       "        window.PlotlyConfig = {MathJaxConfig: 'local'};\n",
       "        if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n",
       "        if (typeof require !== 'undefined') {\n",
       "        require.undef(\"plotly\");\n",
       "        requirejs.config({\n",
       "            paths: {\n",
       "                'plotly': ['https://cdn.plot.ly/plotly-latest.min']\n",
       "            }\n",
       "        });\n",
       "        require(['plotly'], function(Plotly) {\n",
       "            window._Plotly = Plotly;\n",
       "        });\n",
       "        }\n",
       "        </script>\n",
       "        "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "from plotly.offline import init_notebook_mode, iplot\n",
    "import plotly.offline as py\n",
    "import plotly.figure_factory as ff\n",
    "from plotly.subplots import make_subplots\n",
    "from plotly.offline import init_notebook_mode, iplot\n",
    "import plotly.graph_objs as go\n",
    "import plotly.express as px\n",
    "init_notebook_mode(connected=True) # initiate notebook for offline plot\n",
    "\n",
    "\n",
    "# BB added this option\n",
    "from IPython.core.interactiveshell import InteractiveShell\n",
    "InteractiveShell.ast_node_interactivity = \"all\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Download the data [archive](http://www.rdatasciencecases.org/Data/Airline/2008.csv.bz2) (Archived ~ 114 Mb, unzipped - ~ 690 Mb). No need to unzip - pandas can unbzip on the fly.\n",
    "* Place it in the \"../../data\" folder, or change the path below according to your location.\n",
    "* The dataset has information about carriers and flights between US airports during the year 2008. \n",
    "* Column description is available [here](http://www.transtats.bts.gov/Fields.asp?Table_ID=236). Visit this site to find ex. meaning of flight cancellation codes."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Reading data into memory and creating a Pandas _DataFrame_ object**\n",
    "\n",
    "(This may take a while, be patient)\n",
    "\n",
    "We are not going to read in the whole dataset. In order to reduce memory footprint, we instead load only needed columns and cast them suitable data types."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-04-01T21:29:30.952794Z",
     "start_time": "2020-04-01T21:29:30.940310Z"
    }
   },
   "outputs": [],
   "source": [
    "dtype = {'DayOfWeek': np.uint8, 'DayofMonth': np.uint8, 'Month': np.uint8 , 'Cancelled': np.uint8, \n",
    "         'Year': np.uint16, 'FlightNum': np.uint16 , 'Distance': np.uint16, \n",
    "         'UniqueCarrier': str, 'CancellationCode': str, 'Origin': str, 'Dest': str,\n",
    "         'ArrDelay': np.float16, 'DepDelay': np.float16, 'CarrierDelay': np.float16,\n",
    "         'WeatherDelay': np.float16, 'NASDelay': np.float16, 'SecurityDelay': np.float16,\n",
    "         'LateAircraftDelay': np.float16, 'DepTime': np.float16}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-04-01T21:29:59.278211Z",
     "start_time": "2020-04-01T21:29:34.332161Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 37.7 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "# change the path if needed\n",
    "path = '../../data/2008.csv.bz2'\n",
    "flights_df = pd.read_csv(path, usecols=dtype.keys(), dtype=dtype)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Check the number of rows and columns and print column names.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-04-01T21:30:03.644402Z",
     "start_time": "2020-04-01T21:30:03.634981Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(7009728, 19)\n",
      "Index(['Year', 'Month', 'DayofMonth', 'DayOfWeek', 'DepTime', 'UniqueCarrier',\n",
      "       'FlightNum', 'ArrDelay', 'DepDelay', 'Origin', 'Dest', 'Distance',\n",
      "       'Cancelled', 'CancellationCode', 'CarrierDelay', 'WeatherDelay',\n",
      "       'NASDelay', 'SecurityDelay', 'LateAircraftDelay'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "print(flights_df.shape)\n",
    "print(flights_df.columns)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Print first 5 rows of the dataset.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-04-01T21:30:05.860156Z",
     "start_time": "2020-04-01T21:30:05.844621Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year</th>\n",
       "      <th>Month</th>\n",
       "      <th>DayofMonth</th>\n",
       "      <th>DayOfWeek</th>\n",
       "      <th>DepTime</th>\n",
       "      <th>UniqueCarrier</th>\n",
       "      <th>FlightNum</th>\n",
       "      <th>ArrDelay</th>\n",
       "      <th>DepDelay</th>\n",
       "      <th>Origin</th>\n",
       "      <th>Dest</th>\n",
       "      <th>Distance</th>\n",
       "      <th>Cancelled</th>\n",
       "      <th>CancellationCode</th>\n",
       "      <th>CarrierDelay</th>\n",
       "      <th>WeatherDelay</th>\n",
       "      <th>NASDelay</th>\n",
       "      <th>SecurityDelay</th>\n",
       "      <th>LateAircraftDelay</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2008</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>2003.0</td>\n",
       "      <td>WN</td>\n",
       "      <td>335</td>\n",
       "      <td>-14.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>IAD</td>\n",
       "      <td>TPA</td>\n",
       "      <td>810</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2008</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>754.0</td>\n",
       "      <td>WN</td>\n",
       "      <td>3231</td>\n",
       "      <td>2.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>IAD</td>\n",
       "      <td>TPA</td>\n",
       "      <td>810</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2008</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>628.0</td>\n",
       "      <td>WN</td>\n",
       "      <td>448</td>\n",
       "      <td>14.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>IND</td>\n",
       "      <td>BWI</td>\n",
       "      <td>515</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2008</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>926.0</td>\n",
       "      <td>WN</td>\n",
       "      <td>1746</td>\n",
       "      <td>-6.0</td>\n",
       "      <td>-4.0</td>\n",
       "      <td>IND</td>\n",
       "      <td>BWI</td>\n",
       "      <td>515</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2008</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>1829.0</td>\n",
       "      <td>WN</td>\n",
       "      <td>3920</td>\n",
       "      <td>34.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>IND</td>\n",
       "      <td>BWI</td>\n",
       "      <td>515</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>32.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Year  Month  DayofMonth  DayOfWeek  DepTime UniqueCarrier  FlightNum  \\\n",
       "0  2008      1           3          4   2003.0            WN        335   \n",
       "1  2008      1           3          4    754.0            WN       3231   \n",
       "2  2008      1           3          4    628.0            WN        448   \n",
       "3  2008      1           3          4    926.0            WN       1746   \n",
       "4  2008      1           3          4   1829.0            WN       3920   \n",
       "\n",
       "   ArrDelay  DepDelay Origin Dest  Distance  Cancelled CancellationCode  \\\n",
       "0     -14.0       8.0    IAD  TPA       810          0              NaN   \n",
       "1       2.0      19.0    IAD  TPA       810          0              NaN   \n",
       "2      14.0       8.0    IND  BWI       515          0              NaN   \n",
       "3      -6.0      -4.0    IND  BWI       515          0              NaN   \n",
       "4      34.0      34.0    IND  BWI       515          0              NaN   \n",
       "\n",
       "   CarrierDelay  WeatherDelay  NASDelay  SecurityDelay  LateAircraftDelay  \n",
       "0           NaN           NaN       NaN            NaN                NaN  \n",
       "1           NaN           NaN       NaN            NaN                NaN  \n",
       "2           NaN           NaN       NaN            NaN                NaN  \n",
       "3           NaN           NaN       NaN            NaN                NaN  \n",
       "4           2.0           0.0       0.0            0.0               32.0  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "flights_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year</th>\n",
       "      <th>Month</th>\n",
       "      <th>DayofMonth</th>\n",
       "      <th>DayOfWeek</th>\n",
       "      <th>DepTime</th>\n",
       "      <th>UniqueCarrier</th>\n",
       "      <th>FlightNum</th>\n",
       "      <th>ArrDelay</th>\n",
       "      <th>DepDelay</th>\n",
       "      <th>Origin</th>\n",
       "      <th>Dest</th>\n",
       "      <th>Distance</th>\n",
       "      <th>Cancelled</th>\n",
       "      <th>CancellationCode</th>\n",
       "      <th>CarrierDelay</th>\n",
       "      <th>WeatherDelay</th>\n",
       "      <th>NASDelay</th>\n",
       "      <th>SecurityDelay</th>\n",
       "      <th>LateAircraftDelay</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>178</th>\n",
       "      <td>2008</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>WN</td>\n",
       "      <td>126</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>LAS</td>\n",
       "      <td>OAK</td>\n",
       "      <td>407</td>\n",
       "      <td>1</td>\n",
       "      <td>A</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>373</th>\n",
       "      <td>2008</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>WN</td>\n",
       "      <td>1146</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>LAX</td>\n",
       "      <td>OAK</td>\n",
       "      <td>337</td>\n",
       "      <td>1</td>\n",
       "      <td>A</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>399</th>\n",
       "      <td>2008</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>WN</td>\n",
       "      <td>469</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>LAX</td>\n",
       "      <td>SFO</td>\n",
       "      <td>337</td>\n",
       "      <td>1</td>\n",
       "      <td>A</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>401</th>\n",
       "      <td>2008</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>WN</td>\n",
       "      <td>618</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>LAX</td>\n",
       "      <td>SFO</td>\n",
       "      <td>337</td>\n",
       "      <td>1</td>\n",
       "      <td>C</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>415</th>\n",
       "      <td>2008</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>WN</td>\n",
       "      <td>2528</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>LAX</td>\n",
       "      <td>SJC</td>\n",
       "      <td>308</td>\n",
       "      <td>1</td>\n",
       "      <td>A</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7009455</th>\n",
       "      <td>2008</td>\n",
       "      <td>12</td>\n",
       "      <td>13</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>DL</td>\n",
       "      <td>1211</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>LGA</td>\n",
       "      <td>CVG</td>\n",
       "      <td>585</td>\n",
       "      <td>1</td>\n",
       "      <td>A</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7009464</th>\n",
       "      <td>2008</td>\n",
       "      <td>12</td>\n",
       "      <td>13</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>DL</td>\n",
       "      <td>1218</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>CVG</td>\n",
       "      <td>LGA</td>\n",
       "      <td>585</td>\n",
       "      <td>1</td>\n",
       "      <td>A</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7009564</th>\n",
       "      <td>2008</td>\n",
       "      <td>12</td>\n",
       "      <td>13</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>DL</td>\n",
       "      <td>1421</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>BOS</td>\n",
       "      <td>FLL</td>\n",
       "      <td>1237</td>\n",
       "      <td>1</td>\n",
       "      <td>A</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7009565</th>\n",
       "      <td>2008</td>\n",
       "      <td>12</td>\n",
       "      <td>13</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>DL</td>\n",
       "      <td>1422</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>FLL</td>\n",
       "      <td>BOS</td>\n",
       "      <td>1237</td>\n",
       "      <td>1</td>\n",
       "      <td>A</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7009648</th>\n",
       "      <td>2008</td>\n",
       "      <td>12</td>\n",
       "      <td>13</td>\n",
       "      <td>6</td>\n",
       "      <td>NaN</td>\n",
       "      <td>DL</td>\n",
       "      <td>1532</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>SAV</td>\n",
       "      <td>ATL</td>\n",
       "      <td>215</td>\n",
       "      <td>1</td>\n",
       "      <td>A</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>137434 rows Ã— 19 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Year  Month  DayofMonth  DayOfWeek  DepTime UniqueCarrier  FlightNum  \\\n",
       "178      2008      1           3          4      NaN            WN        126   \n",
       "373      2008      1           3          4      NaN            WN       1146   \n",
       "399      2008      1           3          4      NaN            WN        469   \n",
       "401      2008      1           3          4      NaN            WN        618   \n",
       "415      2008      1           3          4      NaN            WN       2528   \n",
       "...       ...    ...         ...        ...      ...           ...        ...   \n",
       "7009455  2008     12          13          6      NaN            DL       1211   \n",
       "7009464  2008     12          13          6      NaN            DL       1218   \n",
       "7009564  2008     12          13          6      NaN            DL       1421   \n",
       "7009565  2008     12          13          6      NaN            DL       1422   \n",
       "7009648  2008     12          13          6      NaN            DL       1532   \n",
       "\n",
       "         ArrDelay  DepDelay Origin Dest  Distance  Cancelled CancellationCode  \\\n",
       "178           NaN       NaN    LAS  OAK       407          1                A   \n",
       "373           NaN       NaN    LAX  OAK       337          1                A   \n",
       "399           NaN       NaN    LAX  SFO       337          1                A   \n",
       "401           NaN       NaN    LAX  SFO       337          1                C   \n",
       "415           NaN       NaN    LAX  SJC       308          1                A   \n",
       "...           ...       ...    ...  ...       ...        ...              ...   \n",
       "7009455       NaN       NaN    LGA  CVG       585          1                A   \n",
       "7009464       NaN       NaN    CVG  LGA       585          1                A   \n",
       "7009564       NaN       NaN    BOS  FLL      1237          1                A   \n",
       "7009565       NaN       NaN    FLL  BOS      1237          1                A   \n",
       "7009648       NaN       NaN    SAV  ATL       215          1                A   \n",
       "\n",
       "         CarrierDelay  WeatherDelay  NASDelay  SecurityDelay  \\\n",
       "178               NaN           NaN       NaN            NaN   \n",
       "373               NaN           NaN       NaN            NaN   \n",
       "399               NaN           NaN       NaN            NaN   \n",
       "401               NaN           NaN       NaN            NaN   \n",
       "415               NaN           NaN       NaN            NaN   \n",
       "...               ...           ...       ...            ...   \n",
       "7009455           NaN           NaN       NaN            NaN   \n",
       "7009464           NaN           NaN       NaN            NaN   \n",
       "7009564           NaN           NaN       NaN            NaN   \n",
       "7009565           NaN           NaN       NaN            NaN   \n",
       "7009648           NaN           NaN       NaN            NaN   \n",
       "\n",
       "         LateAircraftDelay  \n",
       "178                    NaN  \n",
       "373                    NaN  \n",
       "399                    NaN  \n",
       "401                    NaN  \n",
       "415                    NaN  \n",
       "...                    ...  \n",
       "7009455                NaN  \n",
       "7009464                NaN  \n",
       "7009564                NaN  \n",
       "7009565                NaN  \n",
       "7009648                NaN  \n",
       "\n",
       "[137434 rows x 19 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year</th>\n",
       "      <th>Month</th>\n",
       "      <th>DayofMonth</th>\n",
       "      <th>DayOfWeek</th>\n",
       "      <th>DepTime</th>\n",
       "      <th>UniqueCarrier</th>\n",
       "      <th>FlightNum</th>\n",
       "      <th>ArrDelay</th>\n",
       "      <th>DepDelay</th>\n",
       "      <th>Origin</th>\n",
       "      <th>Dest</th>\n",
       "      <th>Distance</th>\n",
       "      <th>Cancelled</th>\n",
       "      <th>CancellationCode</th>\n",
       "      <th>CarrierDelay</th>\n",
       "      <th>WeatherDelay</th>\n",
       "      <th>NASDelay</th>\n",
       "      <th>SecurityDelay</th>\n",
       "      <th>LateAircraftDelay</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [Year, Month, DayofMonth, DayOfWeek, DepTime, UniqueCarrier, FlightNum, ArrDelay, DepDelay, Origin, Dest, Distance, Cancelled, CancellationCode, CarrierDelay, WeatherDelay, NASDelay, SecurityDelay, LateAircraftDelay]\n",
       "Index: []"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "flights_df[flights_df['Cancelled']==1]\n",
    "flights_df[flights_df['FlightNum'].isnull()]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Transpose the frame to see all features at once.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-04-01T21:30:08.092191Z",
     "start_time": "2020-04-01T21:30:08.066870Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Year</th>\n",
       "      <td>2008</td>\n",
       "      <td>2008</td>\n",
       "      <td>2008</td>\n",
       "      <td>2008</td>\n",
       "      <td>2008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Month</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DayofMonth</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DayOfWeek</th>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DepTime</th>\n",
       "      <td>2003</td>\n",
       "      <td>754</td>\n",
       "      <td>628</td>\n",
       "      <td>926</td>\n",
       "      <td>1829</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>UniqueCarrier</th>\n",
       "      <td>WN</td>\n",
       "      <td>WN</td>\n",
       "      <td>WN</td>\n",
       "      <td>WN</td>\n",
       "      <td>WN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FlightNum</th>\n",
       "      <td>335</td>\n",
       "      <td>3231</td>\n",
       "      <td>448</td>\n",
       "      <td>1746</td>\n",
       "      <td>3920</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ArrDelay</th>\n",
       "      <td>-14</td>\n",
       "      <td>2</td>\n",
       "      <td>14</td>\n",
       "      <td>-6</td>\n",
       "      <td>34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DepDelay</th>\n",
       "      <td>8</td>\n",
       "      <td>19</td>\n",
       "      <td>8</td>\n",
       "      <td>-4</td>\n",
       "      <td>34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Origin</th>\n",
       "      <td>IAD</td>\n",
       "      <td>IAD</td>\n",
       "      <td>IND</td>\n",
       "      <td>IND</td>\n",
       "      <td>IND</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Dest</th>\n",
       "      <td>TPA</td>\n",
       "      <td>TPA</td>\n",
       "      <td>BWI</td>\n",
       "      <td>BWI</td>\n",
       "      <td>BWI</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Distance</th>\n",
       "      <td>810</td>\n",
       "      <td>810</td>\n",
       "      <td>515</td>\n",
       "      <td>515</td>\n",
       "      <td>515</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cancelled</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CancellationCode</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CarrierDelay</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>WeatherDelay</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NASDelay</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SecurityDelay</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LateAircraftDelay</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>32</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      0     1     2     3     4\n",
       "Year               2008  2008  2008  2008  2008\n",
       "Month                 1     1     1     1     1\n",
       "DayofMonth            3     3     3     3     3\n",
       "DayOfWeek             4     4     4     4     4\n",
       "DepTime            2003   754   628   926  1829\n",
       "UniqueCarrier        WN    WN    WN    WN    WN\n",
       "FlightNum           335  3231   448  1746  3920\n",
       "ArrDelay            -14     2    14    -6    34\n",
       "DepDelay              8    19     8    -4    34\n",
       "Origin              IAD   IAD   IND   IND   IND\n",
       "Dest                TPA   TPA   BWI   BWI   BWI\n",
       "Distance            810   810   515   515   515\n",
       "Cancelled             0     0     0     0     0\n",
       "CancellationCode    NaN   NaN   NaN   NaN   NaN\n",
       "CarrierDelay        NaN   NaN   NaN   NaN     2\n",
       "WeatherDelay        NaN   NaN   NaN   NaN     0\n",
       "NASDelay            NaN   NaN   NaN   NaN     0\n",
       "SecurityDelay       NaN   NaN   NaN   NaN     0\n",
       "LateAircraftDelay   NaN   NaN   NaN   NaN    32"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "flights_df.head().T"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Examine data types of all features and total dataframe size in memory.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-04-01T21:30:10.771171Z",
     "start_time": "2020-04-01T21:30:10.747602Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 7009728 entries, 0 to 7009727\n",
      "Data columns (total 19 columns):\n",
      "Year                 uint16\n",
      "Month                uint8\n",
      "DayofMonth           uint8\n",
      "DayOfWeek            uint8\n",
      "DepTime              float16\n",
      "UniqueCarrier        object\n",
      "FlightNum            uint16\n",
      "ArrDelay             float16\n",
      "DepDelay             float16\n",
      "Origin               object\n",
      "Dest                 object\n",
      "Distance             uint16\n",
      "Cancelled            uint8\n",
      "CancellationCode     object\n",
      "CarrierDelay         float16\n",
      "WeatherDelay         float16\n",
      "NASDelay             float16\n",
      "SecurityDelay        float16\n",
      "LateAircraftDelay    float16\n",
      "dtypes: float16(8), object(4), uint16(3), uint8(4)\n",
      "memory usage: 387.7+ MB\n"
     ]
    }
   ],
   "source": [
    "flights_df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Get basic statistics of each feature.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-04-01T21:30:19.311154Z",
     "start_time": "2020-04-01T21:30:13.170404Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Year</th>\n",
       "      <td>7009728.0</td>\n",
       "      <td>2008.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2008.0</td>\n",
       "      <td>2008.0</td>\n",
       "      <td>2008.0</td>\n",
       "      <td>2008.0</td>\n",
       "      <td>2008.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Month</th>\n",
       "      <td>7009728.0</td>\n",
       "      <td>6.375130</td>\n",
       "      <td>3.406737</td>\n",
       "      <td>1.0</td>\n",
       "      <td>3.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DayofMonth</th>\n",
       "      <td>7009728.0</td>\n",
       "      <td>15.728015</td>\n",
       "      <td>8.797068</td>\n",
       "      <td>1.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>23.0</td>\n",
       "      <td>31.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DayOfWeek</th>\n",
       "      <td>7009728.0</td>\n",
       "      <td>3.924182</td>\n",
       "      <td>1.988259</td>\n",
       "      <td>1.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DepTime</th>\n",
       "      <td>6873482.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>928.0</td>\n",
       "      <td>1325.0</td>\n",
       "      <td>1728.0</td>\n",
       "      <td>2400.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FlightNum</th>\n",
       "      <td>7009728.0</td>\n",
       "      <td>2224.200105</td>\n",
       "      <td>1961.715999</td>\n",
       "      <td>1.0</td>\n",
       "      <td>622.0</td>\n",
       "      <td>1571.0</td>\n",
       "      <td>3518.0</td>\n",
       "      <td>9743.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ArrDelay</th>\n",
       "      <td>6855029.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-519.0</td>\n",
       "      <td>-10.0</td>\n",
       "      <td>-2.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>2460.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DepDelay</th>\n",
       "      <td>6873482.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>-534.0</td>\n",
       "      <td>-4.0</td>\n",
       "      <td>-1.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>2468.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Distance</th>\n",
       "      <td>7009728.0</td>\n",
       "      <td>726.387029</td>\n",
       "      <td>562.101803</td>\n",
       "      <td>11.0</td>\n",
       "      <td>325.0</td>\n",
       "      <td>581.0</td>\n",
       "      <td>954.0</td>\n",
       "      <td>4962.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cancelled</th>\n",
       "      <td>7009728.0</td>\n",
       "      <td>0.019606</td>\n",
       "      <td>0.138643</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CarrierDelay</th>\n",
       "      <td>1524735.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>2436.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>WeatherDelay</th>\n",
       "      <td>1524735.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1352.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NASDelay</th>\n",
       "      <td>1524735.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>1357.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SecurityDelay</th>\n",
       "      <td>1524735.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>392.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>LateAircraftDelay</th>\n",
       "      <td>1524735.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>26.0</td>\n",
       "      <td>1316.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       count         mean          std     min     25%  \\\n",
       "Year               7009728.0  2008.000000     0.000000  2008.0  2008.0   \n",
       "Month              7009728.0     6.375130     3.406737     1.0     3.0   \n",
       "DayofMonth         7009728.0    15.728015     8.797068     1.0     8.0   \n",
       "DayOfWeek          7009728.0     3.924182     1.988259     1.0     2.0   \n",
       "DepTime            6873482.0          NaN          NaN     1.0   928.0   \n",
       "FlightNum          7009728.0  2224.200105  1961.715999     1.0   622.0   \n",
       "ArrDelay           6855029.0          NaN          NaN  -519.0   -10.0   \n",
       "DepDelay           6873482.0          NaN          NaN  -534.0    -4.0   \n",
       "Distance           7009728.0   726.387029   562.101803    11.0   325.0   \n",
       "Cancelled          7009728.0     0.019606     0.138643     0.0     0.0   \n",
       "CarrierDelay       1524735.0          NaN          NaN     0.0     0.0   \n",
       "WeatherDelay       1524735.0          NaN          NaN     0.0     0.0   \n",
       "NASDelay           1524735.0          NaN          NaN     0.0     0.0   \n",
       "SecurityDelay      1524735.0          NaN          NaN     0.0     0.0   \n",
       "LateAircraftDelay  1524735.0          NaN          NaN     0.0     0.0   \n",
       "\n",
       "                      50%     75%     max  \n",
       "Year               2008.0  2008.0  2008.0  \n",
       "Month                 6.0     9.0    12.0  \n",
       "DayofMonth           16.0    23.0    31.0  \n",
       "DayOfWeek             4.0     6.0     7.0  \n",
       "DepTime            1325.0  1728.0  2400.0  \n",
       "FlightNum          1571.0  3518.0  9743.0  \n",
       "ArrDelay             -2.0    12.0  2460.0  \n",
       "DepDelay             -1.0     8.0  2468.0  \n",
       "Distance            581.0   954.0  4962.0  \n",
       "Cancelled             0.0     0.0     1.0  \n",
       "CarrierDelay          0.0    16.0  2436.0  \n",
       "WeatherDelay          0.0     0.0  1352.0  \n",
       "NASDelay              6.0    21.0  1357.0  \n",
       "SecurityDelay         0.0     0.0   392.0  \n",
       "LateAircraftDelay     0.0    26.0  1316.0  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "flights_df.describe().T"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Count unique Carriers and plot their relative share of flights:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-04-01T21:30:24.680817Z",
     "start_time": "2020-04-01T21:30:24.473634Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "20"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "flights_df['UniqueCarrier'].nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-04-01T21:30:26.711921Z",
     "start_time": "2020-04-01T21:30:26.272255Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "flights_df.groupby('UniqueCarrier').size().plot(kind='bar');\n",
    "#flights_df.groupby('UniqueCarrier').count().plot(kind='bar');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**We can also _group by_ category/categories in order to calculate different aggregated statistics.**\n",
    "\n",
    "**For example, finding top-3 flight codes, that have the largest total distance travelled in year 2008.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-04-01T21:30:29.203207Z",
     "start_time": "2020-04-01T21:30:28.726455Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "UniqueCarrier  FlightNum\n",
       "CO             15           1796244.0\n",
       "               14           1796244.0\n",
       "UA             52           1789722.0\n",
       "Name: Distance, dtype: float64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "flights_df.groupby(['UniqueCarrier','FlightNum'])['Distance'].sum().sort_values(ascending=False).iloc[:3]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Another way:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-04-01T21:30:31.579572Z",
     "start_time": "2020-04-01T21:30:30.977207Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th colspan=\"3\" halign=\"left\">Distance</th>\n",
       "      <th>Cancelled</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>sum</th>\n",
       "      <th>count</th>\n",
       "      <th>sum</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>UniqueCarrier</th>\n",
       "      <th>FlightNum</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">CO</th>\n",
       "      <th>15</th>\n",
       "      <td>4962.000000</td>\n",
       "      <td>1796244.0</td>\n",
       "      <td>362</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>4962.000000</td>\n",
       "      <td>1796244.0</td>\n",
       "      <td>362</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>UA</th>\n",
       "      <th>52</th>\n",
       "      <td>2465.181818</td>\n",
       "      <td>1789722.0</td>\n",
       "      <td>726</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            Distance                  Cancelled\n",
       "                                mean        sum count       sum\n",
       "UniqueCarrier FlightNum                                        \n",
       "CO            15         4962.000000  1796244.0   362         0\n",
       "              14         4962.000000  1796244.0   362         0\n",
       "UA            52         2465.181818  1789722.0   726         8"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "flights_df.groupby(['UniqueCarrier','FlightNum'])\\\n",
    "  .agg({'Distance': [np.mean, np.sum, 'count'],\n",
    "        'Cancelled': np.sum})\\\n",
    "  .sort_values(('Distance', 'sum'), ascending=False)\\\n",
    "  .iloc[0:3]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Number of flights by days of week and months:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-04-01T21:30:34.218060Z",
     "start_time": "2020-04-01T21:30:33.798334Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>DayOfWeek</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Month</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>80807</td>\n",
       "      <td>97298</td>\n",
       "      <td>100080</td>\n",
       "      <td>102043</td>\n",
       "      <td>81940</td>\n",
       "      <td>67178</td>\n",
       "      <td>76419</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>81504</td>\n",
       "      <td>79700</td>\n",
       "      <td>80587</td>\n",
       "      <td>82158</td>\n",
       "      <td>102726</td>\n",
       "      <td>66462</td>\n",
       "      <td>76099</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>103210</td>\n",
       "      <td>81159</td>\n",
       "      <td>82307</td>\n",
       "      <td>82831</td>\n",
       "      <td>82936</td>\n",
       "      <td>86153</td>\n",
       "      <td>97494</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>82463</td>\n",
       "      <td>100785</td>\n",
       "      <td>102586</td>\n",
       "      <td>82799</td>\n",
       "      <td>82964</td>\n",
       "      <td>68304</td>\n",
       "      <td>78225</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>80626</td>\n",
       "      <td>79884</td>\n",
       "      <td>81264</td>\n",
       "      <td>102572</td>\n",
       "      <td>102878</td>\n",
       "      <td>84493</td>\n",
       "      <td>74576</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>104168</td>\n",
       "      <td>82160</td>\n",
       "      <td>82902</td>\n",
       "      <td>83617</td>\n",
       "      <td>83930</td>\n",
       "      <td>72322</td>\n",
       "      <td>99566</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>84095</td>\n",
       "      <td>103429</td>\n",
       "      <td>103315</td>\n",
       "      <td>105035</td>\n",
       "      <td>79349</td>\n",
       "      <td>72219</td>\n",
       "      <td>80489</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>82983</td>\n",
       "      <td>80895</td>\n",
       "      <td>81773</td>\n",
       "      <td>82625</td>\n",
       "      <td>103878</td>\n",
       "      <td>86155</td>\n",
       "      <td>93970</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>94300</td>\n",
       "      <td>91533</td>\n",
       "      <td>74057</td>\n",
       "      <td>75589</td>\n",
       "      <td>75881</td>\n",
       "      <td>58343</td>\n",
       "      <td>71205</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>75131</td>\n",
       "      <td>72195</td>\n",
       "      <td>91900</td>\n",
       "      <td>94123</td>\n",
       "      <td>93894</td>\n",
       "      <td>58168</td>\n",
       "      <td>70794</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>74214</td>\n",
       "      <td>72443</td>\n",
       "      <td>73653</td>\n",
       "      <td>68071</td>\n",
       "      <td>70484</td>\n",
       "      <td>76031</td>\n",
       "      <td>88376</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>92700</td>\n",
       "      <td>90568</td>\n",
       "      <td>85241</td>\n",
       "      <td>70761</td>\n",
       "      <td>74306</td>\n",
       "      <td>61708</td>\n",
       "      <td>69674</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "DayOfWeek       1       2       3       4       5      6      7\n",
       "Month                                                          \n",
       "1           80807   97298  100080  102043   81940  67178  76419\n",
       "2           81504   79700   80587   82158  102726  66462  76099\n",
       "3          103210   81159   82307   82831   82936  86153  97494\n",
       "4           82463  100785  102586   82799   82964  68304  78225\n",
       "5           80626   79884   81264  102572  102878  84493  74576\n",
       "6          104168   82160   82902   83617   83930  72322  99566\n",
       "7           84095  103429  103315  105035   79349  72219  80489\n",
       "8           82983   80895   81773   82625  103878  86155  93970\n",
       "9           94300   91533   74057   75589   75881  58343  71205\n",
       "10          75131   72195   91900   94123   93894  58168  70794\n",
       "11          74214   72443   73653   68071   70484  76031  88376\n",
       "12          92700   90568   85241   70761   74306  61708  69674"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.crosstab(flights_df.Month, flights_df.DayOfWeek)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**It can also be handy to color such tables in order to easily notice outliers:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-04-01T21:30:37.132255Z",
     "start_time": "2020-04-01T21:30:36.640871Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(pd.crosstab(flights_df.Month, flights_df.DayOfWeek),\n",
    "           cmap='seismic', interpolation='none');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Flight distance histogram:**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-04-01T21:30:39.604195Z",
     "start_time": "2020-04-01T21:30:39.307959Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "flights_df.hist('Distance', bins=20);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Making a histogram of flight frequency by date.**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-04-01T21:30:41.696306Z",
     "start_time": "2020-04-01T21:30:40.971300Z"
    }
   },
   "outputs": [],
   "source": [
    "flights_df['Date'] = pd.to_datetime(flights_df.rename(columns={'DayofMonth': 'Day'})[['Year', 'Month', 'Day']])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-04-01T21:30:42.820494Z",
     "start_time": "2020-04-01T21:30:42.658659Z"
    }
   },
   "outputs": [],
   "source": [
    "num_flights_by_date = flights_df.groupby('Date').size()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-04-01T21:30:44.846149Z",
     "start_time": "2020-04-01T21:30:44.539784Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "num_flights_by_date.plot();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Do you see a weekly pattern above? And below?**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-04-01T21:30:46.753534Z",
     "start_time": "2020-04-01T21:30:46.451491Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "num_flights_by_date.rolling(window=7).mean().plot();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**1. Find top-10 carriers in terms of the number of completed flights (_UniqueCarrier_ column)?**\n",
    "\n",
    "**Which of the listed below is _not_ in your top-10 list?**\n",
    "- DL\n",
    "- AA\n",
    "- OO\n",
    "- EV "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Cancelled</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>UniqueCarrier</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>9E</th>\n",
       "      <td>255108</td>\n",
       "      <td>7100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AA</th>\n",
       "      <td>587445</td>\n",
       "      <td>17440</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AQ</th>\n",
       "      <td>7758</td>\n",
       "      <td>42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AS</th>\n",
       "      <td>148963</td>\n",
       "      <td>2139</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B6</th>\n",
       "      <td>192886</td>\n",
       "      <td>3205</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CO</th>\n",
       "      <td>294753</td>\n",
       "      <td>3702</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DL</th>\n",
       "      <td>445118</td>\n",
       "      <td>6813</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>EV</th>\n",
       "      <td>275549</td>\n",
       "      <td>5026</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>F9</th>\n",
       "      <td>95459</td>\n",
       "      <td>303</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FL</th>\n",
       "      <td>259448</td>\n",
       "      <td>2236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HA</th>\n",
       "      <td>61256</td>\n",
       "      <td>570</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MQ</th>\n",
       "      <td>472362</td>\n",
       "      <td>18331</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NW</th>\n",
       "      <td>344746</td>\n",
       "      <td>2906</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>OH</th>\n",
       "      <td>191145</td>\n",
       "      <td>6462</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>OO</th>\n",
       "      <td>554723</td>\n",
       "      <td>12436</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>UA</th>\n",
       "      <td>438974</td>\n",
       "      <td>10541</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>US</th>\n",
       "      <td>447007</td>\n",
       "      <td>6582</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>WN</th>\n",
       "      <td>1189365</td>\n",
       "      <td>12389</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>XE</th>\n",
       "      <td>364518</td>\n",
       "      <td>9992</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>YV</th>\n",
       "      <td>245711</td>\n",
       "      <td>9219</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Cancelled            0      1\n",
       "UniqueCarrier                \n",
       "9E              255108   7100\n",
       "AA              587445  17440\n",
       "AQ                7758     42\n",
       "AS              148963   2139\n",
       "B6              192886   3205\n",
       "CO              294753   3702\n",
       "DL              445118   6813\n",
       "EV              275549   5026\n",
       "F9               95459    303\n",
       "FL              259448   2236\n",
       "HA               61256    570\n",
       "MQ              472362  18331\n",
       "NW              344746   2906\n",
       "OH              191145   6462\n",
       "OO              554723  12436\n",
       "UA              438974  10541\n",
       "US              447007   6582\n",
       "WN             1189365  12389\n",
       "XE              364518   9992\n",
       "YV              245711   9219"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The top 10 carriers in terms of completed (not cancelled) flights are:\n",
      "UniqueCarrier\n",
      "WN    1189365\n",
      "AA     587445\n",
      "OO     554723\n",
      "MQ     472362\n",
      "US     447007\n",
      "DL     445118\n",
      "UA     438974\n",
      "XE     364518\n",
      "NW     344746\n",
      "CO     294753\n",
      "dtype: int64\n",
      "\n",
      "\n",
      "EV is not in the list\n"
     ]
    }
   ],
   "source": [
    "# Find all completed (not cancelled)\n",
    "#flights_df['Cancelled'].value_counts()\n",
    "#flights_df[flights_df['Cancelled'].isnull()]\n",
    "\n",
    "pd.crosstab(flights_df['UniqueCarrier'],flights_df['Cancelled'])\n",
    "\n",
    "print(\"The top 10 carriers in terms of completed (not cancelled) flights are:\")\n",
    "#top10Completed=flights_df[flights_df['Cancelled']==0].groupby(['UniqueCarrier'])['FlightNum'].count().sort_values(ascending=False).iloc[:10]  \n",
    "top10Completed=flights_df[flights_df['Cancelled']==0].groupby(['UniqueCarrier']).size().sort_values(ascending=False).iloc[:10]  \n",
    "\n",
    "print(top10Completed)\n",
    "\n",
    "# fd=flights_df[flights_df['Cancelled']==0]\n",
    "# fd.shape\n",
    "\n",
    "\n",
    "# One approach is to find the carriers that have had the least number of cancellations. \n",
    "# This indicates thay have had the most number of completed flights.\n",
    "\n",
    "# top10LessCancelled=flights_df.groupby(['UniqueCarrier'])['Cancelled'].sum().sort_values(ascending=True).iloc[:10]  \n",
    "# print(top10LessCancelled)\n",
    "\n",
    "print(\"\\n\")\n",
    "if 'DL' not in top10Completed:\n",
    "    print(\"DL is not in the list\")\n",
    "    \n",
    "if 'AA' not in top10Completed:\n",
    "    print(\"AA is not in the list\")\n",
    "\n",
    "if 'OO' not in top10Completed:\n",
    "    print(\"OO is not in the list\")\n",
    "    \n",
    "if 'EV' not in top10Completed:\n",
    "    print(\"EV is not in the list\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**2. Plot distributions of flight cancellation reasons (_CancellationCode_).**\n",
    "\n",
    "**What is the most frequent reason for flight cancellation? (Use this [link](https://www.transtats.bts.gov/Fields.asp?Table_ID=236) to translate codes into reasons)**\n",
    "- carrier\n",
    "- weather conditions \n",
    "- National Air System\n",
    "- security reasons"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 720x576 with 0 Axes>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x21da74e8988>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Weather is the most frequent reason for flight cancellations\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Check if we have Nan values for cancellation codes!  - The flights that were not cancelled\n",
    "#flights_df[flights_df['CancellationCode'].isnull()] \n",
    "\n",
    "plt.figure(figsize=(10,8))\n",
    "\n",
    "# Perhaps it is better to consider only rows where the flights were cancelled\n",
    "# I assume a bar chart should suffice\n",
    "cancelData=flights_df[flights_df['Cancelled']==1].groupby('CancellationCode').size()\n",
    "cancelData.plot(kind='bar')\n",
    "\n",
    "cancelDataSort=flights_df[flights_df['Cancelled']==1].groupby(['CancellationCode'])['CancellationCode'].size().sort_values(ascending=False)\n",
    "cancelDataTopReason=cancelDataSort.iloc[:1]\n",
    "\n",
    "\n",
    "if 'A' in cancelDataTopReason:\n",
    "    print(\"Carrier is the most frequent reason for flight cancellations\")\n",
    "elif 'B' in cancelDataTopReason:\n",
    "    print(\"Weather is the most frequent reason for flight cancellations\")   \n",
    "elif 'C' in cancelDataTopReason:\n",
    "    print(\"National Air System is the most frequent reason for flight cancellations\")   \n",
    "else: \n",
    "    print(\"Security is the most frequent reason for flight cancellations\")   "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**3. Which route is the most frequent, in terms of the number of flights?**\n",
    "\n",
    "(Take a look at _'Origin'_ and _'Dest'_ features. Consider _A->B_ and _B->A_ directions as _different_ routes) \n",
    "\n",
    " - New-York â€“ Washington\n",
    " - San-Francisco â€“ Los-Angeles \n",
    " - San-Jose â€“ Dallas\n",
    " - New-York â€“ San-Francisco"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Route\n",
       "SFO - LAX    13788\n",
       "Name: Route, dtype: int64"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "San-Francisco to Los-Angeles has the most number of flights\n"
     ]
    }
   ],
   "source": [
    "# Create a new column\n",
    "flights_df['Route']= flights_df['Origin'] + ' - ' + flights_df['Dest']\n",
    "flights_df.groupby(['Route'])['Route'].size().sort_values(ascending=False).iloc[:1]\n",
    "\n",
    "print(\"San-Francisco to Los-Angeles has the most number of flights\")\n",
    "\n",
    "# Another way?\n",
    "#flight_freq = flights_df.groupby(['Origin', 'Dest'])['FlightNum'].count().sort_values(ascending=False).iloc[:1]\n",
    "#flight_freq"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**4. Find top-5 delayed routes (count how many times they were delayed on departure). From all flights on these 5 routes, count all flights with weather conditions contributing to a delay.**\n",
    "\n",
    "- 449 \n",
    "- 539 \n",
    "- 549 \n",
    "- 668 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Route\n",
       "LAX - SFO    6253\n",
       "DAL - HOU    5742\n",
       "SFO - LAX    5322\n",
       "ORD - LGA    5311\n",
       "HOU - DAL    5288\n",
       "Name: DepDelay, dtype: int64"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of flights is  668\n"
     ]
    }
   ],
   "source": [
    "# I assume I should only consider departure delays\n",
    "#flights_df[flights_df['DepDelay']== 0.0]\n",
    "\n",
    "top5DelRoute=flights_df[flights_df['DepDelay'] > 0.0].groupby(['Route'])['DepDelay'].\\\n",
    "count().sort_values(ascending=False).iloc[0:5]\n",
    "\n",
    "#top5DelRoute1=flights_df[flights_df['DepDelay'] > 0.0].groupby(['Route']).\\\n",
    "#size().sort_values(ascending=False).iloc[0:5]\n",
    "\n",
    "top5DelRoute\n",
    "\n",
    "#filterDF = pd.Series(top5DelRoute)\n",
    "#print(filterDF)\n",
    "\n",
    "filterList=list(top5DelRoute.keys())\n",
    "\n",
    "top5DB = flights_df[(flights_df['Route'].isin(filterList)) & (flights_df['DepDelay'] > 0.0) & (flights_df['WeatherDelay'] > 0.0)]\n",
    "n=len(top5DB)\n",
    "\n",
    "print(\"The number of flights is \", n)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**5. Examine the hourly distribution of departure times. For that, create a new series from DepTime, removing missing values.**\n",
    "\n",
    "**Choose all correct statements:**\n",
    " - Flights are normally distributed within time interval [0-23] (Search for: Normal distribution, bell curve).\n",
    " - Flights are uniformly distributed within time interval [0-23].\n",
    " - In the period from 0 am to 4 am there are considerably less flights than from 7 pm to 8 pm."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    20.0\n",
       "1     8.0\n",
       "2     6.0\n",
       "3     9.0\n",
       "4    18.0\n",
       "Name: DepTime, dtype: float16"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x21da79e1748>"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The flights have somewhat normal distribution, but not compeltely\n",
      "The flights do not seem to be uniformly distributed\n",
      "The 3rd statement seems true\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Considering only the hours ....\n",
    "# Create a new series from Departure Time- Remove missing values\n",
    "newDepTime = flights_df['DepTime'].dropna()\n",
    "newDepTime = newDepTime.div(100).round()\n",
    "\n",
    "#newDepTime.astype('int64', copy=False)\n",
    "\n",
    "newDepTime.head()\n",
    "\n",
    "newDepTime.hist(bins=24)\n",
    "#newDepTime.skew()\n",
    "\n",
    "print(\"The flights have somewhat normal distribution, but not compeltely\")\n",
    "print(\"The flights do not seem to be uniformly distributed\")\n",
    "print(\"The 3rd statement seems true\")  \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**6. Show how the number of flights changes through time (on the daily/weekly/monthly basis) and interpret the findings.**\n",
    "\n",
    "**Choose all correct statements:**\n",
    "- The number of flights during weekends is less than during weekdays (working days).\n",
    "- The lowest number of flights is on Sunday.\n",
    "- There are less flights during winter than during summer.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>DayOfWeek</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>All</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Month</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>80807</td>\n",
       "      <td>97298</td>\n",
       "      <td>100080</td>\n",
       "      <td>102043</td>\n",
       "      <td>81940</td>\n",
       "      <td>67178</td>\n",
       "      <td>76419</td>\n",
       "      <td>605765</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>81504</td>\n",
       "      <td>79700</td>\n",
       "      <td>80587</td>\n",
       "      <td>82158</td>\n",
       "      <td>102726</td>\n",
       "      <td>66462</td>\n",
       "      <td>76099</td>\n",
       "      <td>569236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>103210</td>\n",
       "      <td>81159</td>\n",
       "      <td>82307</td>\n",
       "      <td>82831</td>\n",
       "      <td>82936</td>\n",
       "      <td>86153</td>\n",
       "      <td>97494</td>\n",
       "      <td>616090</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>82463</td>\n",
       "      <td>100785</td>\n",
       "      <td>102586</td>\n",
       "      <td>82799</td>\n",
       "      <td>82964</td>\n",
       "      <td>68304</td>\n",
       "      <td>78225</td>\n",
       "      <td>598126</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>80626</td>\n",
       "      <td>79884</td>\n",
       "      <td>81264</td>\n",
       "      <td>102572</td>\n",
       "      <td>102878</td>\n",
       "      <td>84493</td>\n",
       "      <td>74576</td>\n",
       "      <td>606293</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>104168</td>\n",
       "      <td>82160</td>\n",
       "      <td>82902</td>\n",
       "      <td>83617</td>\n",
       "      <td>83930</td>\n",
       "      <td>72322</td>\n",
       "      <td>99566</td>\n",
       "      <td>608665</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>84095</td>\n",
       "      <td>103429</td>\n",
       "      <td>103315</td>\n",
       "      <td>105035</td>\n",
       "      <td>79349</td>\n",
       "      <td>72219</td>\n",
       "      <td>80489</td>\n",
       "      <td>627931</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>82983</td>\n",
       "      <td>80895</td>\n",
       "      <td>81773</td>\n",
       "      <td>82625</td>\n",
       "      <td>103878</td>\n",
       "      <td>86155</td>\n",
       "      <td>93970</td>\n",
       "      <td>612279</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>94300</td>\n",
       "      <td>91533</td>\n",
       "      <td>74057</td>\n",
       "      <td>75589</td>\n",
       "      <td>75881</td>\n",
       "      <td>58343</td>\n",
       "      <td>71205</td>\n",
       "      <td>540908</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>75131</td>\n",
       "      <td>72195</td>\n",
       "      <td>91900</td>\n",
       "      <td>94123</td>\n",
       "      <td>93894</td>\n",
       "      <td>58168</td>\n",
       "      <td>70794</td>\n",
       "      <td>556205</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>74214</td>\n",
       "      <td>72443</td>\n",
       "      <td>73653</td>\n",
       "      <td>68071</td>\n",
       "      <td>70484</td>\n",
       "      <td>76031</td>\n",
       "      <td>88376</td>\n",
       "      <td>523272</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>92700</td>\n",
       "      <td>90568</td>\n",
       "      <td>85241</td>\n",
       "      <td>70761</td>\n",
       "      <td>74306</td>\n",
       "      <td>61708</td>\n",
       "      <td>69674</td>\n",
       "      <td>544958</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>All</th>\n",
       "      <td>1036201</td>\n",
       "      <td>1032049</td>\n",
       "      <td>1039665</td>\n",
       "      <td>1032224</td>\n",
       "      <td>1035166</td>\n",
       "      <td>857536</td>\n",
       "      <td>976887</td>\n",
       "      <td>7009728</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "DayOfWeek        1        2        3        4        5       6       7  \\\n",
       "Month                                                                    \n",
       "1            80807    97298   100080   102043    81940   67178   76419   \n",
       "2            81504    79700    80587    82158   102726   66462   76099   \n",
       "3           103210    81159    82307    82831    82936   86153   97494   \n",
       "4            82463   100785   102586    82799    82964   68304   78225   \n",
       "5            80626    79884    81264   102572   102878   84493   74576   \n",
       "6           104168    82160    82902    83617    83930   72322   99566   \n",
       "7            84095   103429   103315   105035    79349   72219   80489   \n",
       "8            82983    80895    81773    82625   103878   86155   93970   \n",
       "9            94300    91533    74057    75589    75881   58343   71205   \n",
       "10           75131    72195    91900    94123    93894   58168   70794   \n",
       "11           74214    72443    73653    68071    70484   76031   88376   \n",
       "12           92700    90568    85241    70761    74306   61708   69674   \n",
       "All        1036201  1032049  1039665  1032224  1035166  857536  976887   \n",
       "\n",
       "DayOfWeek      All  \n",
       "Month               \n",
       "1           605765  \n",
       "2           569236  \n",
       "3           616090  \n",
       "4           598126  \n",
       "5           606293  \n",
       "6           608665  \n",
       "7           627931  \n",
       "8           612279  \n",
       "9           540908  \n",
       "10          556205  \n",
       "11          523272  \n",
       "12          544958  \n",
       "All        7009728  "
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Month</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>10</th>\n",
       "      <th>11</th>\n",
       "      <th>12</th>\n",
       "      <th>All</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Week</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>119973</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>52826</td>\n",
       "      <td>172799</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>135944</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>135944</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>134983</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>134983</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>135185</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>135185</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>79680</td>\n",
       "      <td>55367</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>135047</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0</td>\n",
       "      <td>135012</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>135012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0</td>\n",
       "      <td>136905</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>136905</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0</td>\n",
       "      <td>139594</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>139594</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0</td>\n",
       "      <td>102358</td>\n",
       "      <td>36352</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>138710</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>139662</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>139662</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>139817</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>139817</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>139749</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>139749</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>139871</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>139871</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>20639</td>\n",
       "      <td>118919</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>139558</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>139381</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>139381</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>139302</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>139302</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>139282</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>139282</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>61242</td>\n",
       "      <td>77356</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>138598</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>138011</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>138011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>137783</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>137783</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>135003</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>135003</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>118140</td>\n",
       "      <td>19523</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>137663</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>140646</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>140646</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>142243</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>142243</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>142600</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>142600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>142735</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>142735</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>20918</td>\n",
       "      <td>116297</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>137215</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>141573</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>141573</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>143292</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>143292</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>143107</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>143107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>83662</td>\n",
       "      <td>59139</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>142801</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>142403</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>142403</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>141875</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>141875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>137811</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>137811</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>131051</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>131051</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>127474</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>127474</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>125674</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>125674</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>125497</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>125497</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>125411</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>125411</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>36852</td>\n",
       "      <td>88136</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>124988</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>125235</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>125235</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>125212</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>125212</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>125236</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>125236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>92386</td>\n",
       "      <td>31984</td>\n",
       "      <td>0</td>\n",
       "      <td>124370</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>124509</td>\n",
       "      <td>0</td>\n",
       "      <td>124509</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>124361</td>\n",
       "      <td>0</td>\n",
       "      <td>124361</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>124889</td>\n",
       "      <td>0</td>\n",
       "      <td>124889</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>48</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>117529</td>\n",
       "      <td>0</td>\n",
       "      <td>117529</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>123373</td>\n",
       "      <td>123373</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>122224</td>\n",
       "      <td>122224</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>125757</td>\n",
       "      <td>125757</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>52</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>120778</td>\n",
       "      <td>120778</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>All</th>\n",
       "      <td>605765</td>\n",
       "      <td>569236</td>\n",
       "      <td>616090</td>\n",
       "      <td>598126</td>\n",
       "      <td>606293</td>\n",
       "      <td>608665</td>\n",
       "      <td>627931</td>\n",
       "      <td>612279</td>\n",
       "      <td>540908</td>\n",
       "      <td>556205</td>\n",
       "      <td>523272</td>\n",
       "      <td>544958</td>\n",
       "      <td>7009728</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Month       1       2       3       4       5       6       7       8       9  \\\n",
       "Week                                                                            \n",
       "1      119973       0       0       0       0       0       0       0       0   \n",
       "2      135944       0       0       0       0       0       0       0       0   \n",
       "3      134983       0       0       0       0       0       0       0       0   \n",
       "4      135185       0       0       0       0       0       0       0       0   \n",
       "5       79680   55367       0       0       0       0       0       0       0   \n",
       "6           0  135012       0       0       0       0       0       0       0   \n",
       "7           0  136905       0       0       0       0       0       0       0   \n",
       "8           0  139594       0       0       0       0       0       0       0   \n",
       "9           0  102358   36352       0       0       0       0       0       0   \n",
       "10          0       0  139662       0       0       0       0       0       0   \n",
       "11          0       0  139817       0       0       0       0       0       0   \n",
       "12          0       0  139749       0       0       0       0       0       0   \n",
       "13          0       0  139871       0       0       0       0       0       0   \n",
       "14          0       0   20639  118919       0       0       0       0       0   \n",
       "15          0       0       0  139381       0       0       0       0       0   \n",
       "16          0       0       0  139302       0       0       0       0       0   \n",
       "17          0       0       0  139282       0       0       0       0       0   \n",
       "18          0       0       0   61242   77356       0       0       0       0   \n",
       "19          0       0       0       0  138011       0       0       0       0   \n",
       "20          0       0       0       0  137783       0       0       0       0   \n",
       "21          0       0       0       0  135003       0       0       0       0   \n",
       "22          0       0       0       0  118140   19523       0       0       0   \n",
       "23          0       0       0       0       0  140646       0       0       0   \n",
       "24          0       0       0       0       0  142243       0       0       0   \n",
       "25          0       0       0       0       0  142600       0       0       0   \n",
       "26          0       0       0       0       0  142735       0       0       0   \n",
       "27          0       0       0       0       0   20918  116297       0       0   \n",
       "28          0       0       0       0       0       0  141573       0       0   \n",
       "29          0       0       0       0       0       0  143292       0       0   \n",
       "30          0       0       0       0       0       0  143107       0       0   \n",
       "31          0       0       0       0       0       0   83662   59139       0   \n",
       "32          0       0       0       0       0       0       0  142403       0   \n",
       "33          0       0       0       0       0       0       0  141875       0   \n",
       "34          0       0       0       0       0       0       0  137811       0   \n",
       "35          0       0       0       0       0       0       0  131051       0   \n",
       "36          0       0       0       0       0       0       0       0  127474   \n",
       "37          0       0       0       0       0       0       0       0  125674   \n",
       "38          0       0       0       0       0       0       0       0  125497   \n",
       "39          0       0       0       0       0       0       0       0  125411   \n",
       "40          0       0       0       0       0       0       0       0   36852   \n",
       "41          0       0       0       0       0       0       0       0       0   \n",
       "42          0       0       0       0       0       0       0       0       0   \n",
       "43          0       0       0       0       0       0       0       0       0   \n",
       "44          0       0       0       0       0       0       0       0       0   \n",
       "45          0       0       0       0       0       0       0       0       0   \n",
       "46          0       0       0       0       0       0       0       0       0   \n",
       "47          0       0       0       0       0       0       0       0       0   \n",
       "48          0       0       0       0       0       0       0       0       0   \n",
       "49          0       0       0       0       0       0       0       0       0   \n",
       "50          0       0       0       0       0       0       0       0       0   \n",
       "51          0       0       0       0       0       0       0       0       0   \n",
       "52          0       0       0       0       0       0       0       0       0   \n",
       "All    605765  569236  616090  598126  606293  608665  627931  612279  540908   \n",
       "\n",
       "Month      10      11      12      All  \n",
       "Week                                    \n",
       "1           0       0   52826   172799  \n",
       "2           0       0       0   135944  \n",
       "3           0       0       0   134983  \n",
       "4           0       0       0   135185  \n",
       "5           0       0       0   135047  \n",
       "6           0       0       0   135012  \n",
       "7           0       0       0   136905  \n",
       "8           0       0       0   139594  \n",
       "9           0       0       0   138710  \n",
       "10          0       0       0   139662  \n",
       "11          0       0       0   139817  \n",
       "12          0       0       0   139749  \n",
       "13          0       0       0   139871  \n",
       "14          0       0       0   139558  \n",
       "15          0       0       0   139381  \n",
       "16          0       0       0   139302  \n",
       "17          0       0       0   139282  \n",
       "18          0       0       0   138598  \n",
       "19          0       0       0   138011  \n",
       "20          0       0       0   137783  \n",
       "21          0       0       0   135003  \n",
       "22          0       0       0   137663  \n",
       "23          0       0       0   140646  \n",
       "24          0       0       0   142243  \n",
       "25          0       0       0   142600  \n",
       "26          0       0       0   142735  \n",
       "27          0       0       0   137215  \n",
       "28          0       0       0   141573  \n",
       "29          0       0       0   143292  \n",
       "30          0       0       0   143107  \n",
       "31          0       0       0   142801  \n",
       "32          0       0       0   142403  \n",
       "33          0       0       0   141875  \n",
       "34          0       0       0   137811  \n",
       "35          0       0       0   131051  \n",
       "36          0       0       0   127474  \n",
       "37          0       0       0   125674  \n",
       "38          0       0       0   125497  \n",
       "39          0       0       0   125411  \n",
       "40      88136       0       0   124988  \n",
       "41     125235       0       0   125235  \n",
       "42     125212       0       0   125212  \n",
       "43     125236       0       0   125236  \n",
       "44      92386   31984       0   124370  \n",
       "45          0  124509       0   124509  \n",
       "46          0  124361       0   124361  \n",
       "47          0  124889       0   124889  \n",
       "48          0  117529       0   117529  \n",
       "49          0       0  123373   123373  \n",
       "50          0       0  122224   122224  \n",
       "51          0       0  125757   125757  \n",
       "52          0       0  120778   120778  \n",
       "All    556205  523272  544958  7009728  "
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x21da7436b08>"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "DayOfWeek\n",
       "6    857536\n",
       "Name: FlightNum, dtype: int64"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Try to extract the week from the date!\n",
    "flights_df['Week']=flights_df['Date'].dt.week\n",
    "\n",
    "\n",
    "# Overall Analysis\n",
    "flightAnalysis = pd.crosstab(flights_df['Month'], flights_df['DayOfWeek'], margins=True)\n",
    "flightAnalysis\n",
    "\n",
    "flightAnalysisW = pd.crosstab(flights_df['Month'], flights_df['Week'], margins=True)\n",
    "flightAnalysisW.T\n",
    "\n",
    "\n",
    "# Try to extract the week from the date!\n",
    "#flights_df['Week']=flights_df['Date'].dt.week\n",
    "#flights_df['Week']\n",
    "#flights_df.head()\n",
    "\n",
    "# Figure Analysis\n",
    "#plt.figure(figsize=(15,10))\n",
    "\n",
    "#plt.subplot(2,2,1)\n",
    "# Show how number of flights changes through time - On Daily Basis\n",
    "dailyData=flights_df.groupby(['DayOfWeek'])['FlightNum'].count()\n",
    "dailyData.plot(kind='bar')\n",
    "#sns.distplot(daily)\n",
    "\n",
    "dailyDataSort=flights_df.groupby(['DayOfWeek'])['FlightNum'].count().sort_values(ascending=True)\n",
    "dailyDataBotDay=dailyDataSort.iloc[:1]\n",
    "\n",
    "dailyDataBotDay\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 1080x720 with 0 Axes>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x21da74af088>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15,10))\n",
    "\n",
    "weeklyData=flights_df.groupby(['Week'])['FlightNum'].count()\n",
    "weeklyData.plot(kind='bar')\n",
    "\n",
    "weeklyDataSort=flights_df.groupby(['Week'])['FlightNum'].count().sort_values(ascending=True)\n",
    "weeklyDataBotDay=weeklyDataSort.iloc[:1]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x21da7092748>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The least month is \n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Month\n",
       "11    523272\n",
       "Name: FlightNum, dtype: int64"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1st statement seems true\n",
      "2nd statement seems wrong, as the least on is on day 6 which is Saturday\n",
      "3rd statement seems true\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYkAAAEJCAYAAABhbdtlAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjEsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8QZhcZAAAWmUlEQVR4nO3df7DddX3n8edLIgoqBCFQllBjbdqKrqJmITN0WioaAnYbupUdsFNSpJtZxWrH3dZoO0OrdRb2l4u7ykxGosG1RaRVUgVjCtJOuwK5aAoiukR04S4IgSCitFrwvX+cT7rH6/nce3Nz70kgz8fMmfP9vr+f7/d9Tn6c1/n+OOekqpAkaZRn7OsHIEnafxkSkqQuQ0KS1GVISJK6DAlJUpchIUnqWrSvH8B8O+qoo2rZsmX7+mFI0lPKrbfe+lBVLZlaf9qFxLJly5iYmNjXD0OSnlKS/J9RdQ83SZK6DAlJUpchIUnqMiQkSV2GhCSpy5CQJHUZEpKkLkNCktT1tPswnfRUtGz9Z+a03jcvft08PxLpR7knIUnqMiQkSV2GhCSpy3MSTyMe15Y03wwJ6QDkGwrN1qxCIsli4EPAS4EC3gh8Dfg4sAz4JvCvq+qRJAEuBc4EHgd+s6q+2LazFviDttk/rqpNrf4q4CPAIcC1wNuqqpI8f1SPvXnC0mz4IioNzHZP4lLgs1X1+iQHA4cC7wKur6qLk6wH1gPvAM4AlrfbycBlwMntBf8iYAWDoLk1yeb2on8ZsA64iUFIrAaua9sc1WNO/I//1OXfnbRvzHjiOslhwC8AlwNU1Q+q6tvAGmBTG7YJOKtNrwGuqIGbgMVJjgVOB7ZW1a4WDFuB1W3ZYVX1haoq4Iop2xrVQ5I0BrO5uumngJ3Ah5N8KcmHkjwHOKaq7gdo90e38ccB9w6tP9lq09UnR9SZpsePSLIuyUSSiZ07d87iKUmSZmM2h5sWAa8Efruqbk5yKYPDPj0ZUas51GetqjYAGwBWrFixR+tq7uZyCMjDP9JTy2z2JCaByaq6uc1fzSA0HmiHimj3Dw6NP35o/aXAfTPUl46oM00PSdIYzBgSVfUt4N4kP9tKpwFfATYDa1ttLXBNm94MnJeBlcCj7VDRFmBVkiOSHAGsAra0ZY8lWdmujDpvyrZG9ZAkjcFsr276beBj7cqmu4HzGQTMVUkuAO4Bzm5jr2Vw+esOBpfAng9QVbuSvAfY1sa9u6p2tek38f8vgb2u3QAu7vSQJI3BrEKiqrYzuHR1qtNGjC3gws52NgIbR9QnGHwGY2r94VE9JEnj4Xc3SZK6DAlJUpchIUnqMiQkSV1+C+wC8vuGJD3VuSchSeoyJCRJXYaEJKnLkJAkdXniWtLTjheNzB/3JCRJXYaEJKnLw02S9BQzzsNp7klIkrrck5C04DyR/NTlnoQkqcuQkCR1GRKSpC5DQpLU5YlrSdpLT+cT8+5JSJK6DAlJUpchIUnqMiQkSV2zCokk30xye5LtSSZa7flJtia5q90f0epJ8v4kO5LcluSVQ9tZ28bflWTtUP1Vbfs72rqZrockaTz2ZE/il6rqxKpa0ebXA9dX1XLg+jYPcAawvN3WAZfB4AUfuAg4GTgJuGjoRf+yNnb3eqtn6CFJGoO9Ody0BtjUpjcBZw3Vr6iBm4DFSY4FTge2VtWuqnoE2AqsbssOq6ovVFUBV0zZ1qgekqQxmG1IFPC5JLcmWddqx1TV/QDt/uhWPw64d2jdyVabrj45oj5djx+RZF2SiSQTO3funOVTkiTNZLYfpjulqu5LcjSwNclXpxmbEbWaQ33WqmoDsAFgxYoVe7SuJKlvVnsSVXVfu38Q+CSDcwoPtENFtPsH2/BJ4Pih1ZcC981QXzqizjQ9JEljMGNIJHlOkuftngZWAV8GNgO7r1BaC1zTpjcD57WrnFYCj7ZDRVuAVUmOaCesVwFb2rLHkqxsVzWdN2Vbo3pIksZgNoebjgE+2a5KXQT8SVV9Nsk24KokFwD3AGe38dcCZwI7gMeB8wGqaleS9wDb2rh3V9WuNv0m4CPAIcB17QZwcaeHJGkMZgyJqrobePmI+sPAaSPqBVzY2dZGYOOI+gTw0tn2kCSNh5+4liR1GRKSpC5DQpLUZUhIkroMCUlSlyEhSeoyJCRJXYaEJKnLkJAkdRkSkqQuQ0KS1GVISJK6DAlJUpchIUnqMiQkSV2GhCSpy5CQJHUZEpKkLkNCktRlSEiSugwJSVKXISFJ6jIkJEldhoQkqWvWIZHkoCRfSvLpNv/CJDcnuSvJx5Mc3OrPavM72vJlQ9t4Z6t/LcnpQ/XVrbYjyfqh+sgekqTx2JM9ibcBdw7NXwK8r6qWA48AF7T6BcAjVfXTwPvaOJKcAJwDvARYDXywBc9BwAeAM4ATgHPb2Ol6SJLGYFYhkWQp8DrgQ20+wKuBq9uQTcBZbXpNm6ctP62NXwNcWVXfr6pvADuAk9ptR1XdXVU/AK4E1szQQ5I0BrPdk/hvwO8BP2zzRwLfrqon2vwkcFybPg64F6Atf7SN/6f6lHV69el6/Igk65JMJJnYuXPnLJ+SJGkmM4ZEkl8GHqyqW4fLI4bWDMvmq/7jxaoNVbWiqlYsWbJk1BBJ0hwsmsWYU4BfSXIm8GzgMAZ7FouTLGrv9JcC97Xxk8DxwGSSRcDhwK6h+m7D64yqPzRND0nSGMy4J1FV76yqpVW1jMGJ5xuq6teBzwOvb8PWAte06c1tnrb8hqqqVj+nXf30QmA5cAuwDVjermQ6uPXY3Nbp9ZAkjcHefE7iHcDbk+xgcP7g8la/HDiy1d8OrAeoqjuAq4CvAJ8FLqyqJ9tewluALQyunrqqjZ2uhyRpDGZzuOmfVNWNwI1t+m4GVyZNHfMPwNmd9d8LvHdE/Vrg2hH1kT0kSePhJ64lSV2GhCSpy5CQJHUZEpKkLkNCktRlSEiSugwJSVKXISFJ6jIkJEldhoQkqcuQkCR1GRKSpC5DQpLUZUhIkroMCUlSlyEhSeoyJCRJXYaEJKnLkJAkdRkSkqQuQ0KS1GVISJK6DAlJUpchIUnqmjEkkjw7yS1J/i7JHUn+qNVfmOTmJHcl+XiSg1v9WW1+R1u+bGhb72z1ryU5fai+utV2JFk/VB/ZQ5I0HrPZk/g+8OqqejlwIrA6yUrgEuB9VbUceAS4oI2/AHikqn4aeF8bR5ITgHOAlwCrgQ8mOSjJQcAHgDOAE4Bz21im6SFJGoMZQ6IGvttmn9luBbwauLrVNwFntek1bZ62/LQkafUrq+r7VfUNYAdwUrvtqKq7q+oHwJXAmrZOr4ckaQxmdU6ivePfDjwIbAW+Dny7qp5oQyaB49r0ccC9AG35o8CRw/Up6/TqR07TY+rjW5dkIsnEzp07Z/OUJEmzMKuQqKonq+pEYCmDd/4vHjWs3aezbL7qox7fhqpaUVUrlixZMmqIJGkO9ujqpqr6NnAjsBJYnGRRW7QUuK9NTwLHA7TlhwO7hutT1unVH5qmhyRpDGZzddOSJIvb9CHAa4A7gc8Dr2/D1gLXtOnNbZ62/IaqqlY/p1399EJgOXALsA1Y3q5kOpjBye3NbZ1eD0nSGCyaeQjHApvaVUjPAK6qqk8n+QpwZZI/Br4EXN7GXw58NMkOBnsQ5wBU1R1JrgK+AjwBXFhVTwIkeQuwBTgI2FhVd7RtvaPTQ5I0BjOGRFXdBrxiRP1uBucnptb/ATi7s633Au8dUb8WuHa2PSRJ4+EnriVJXYaEJKnLkJAkdRkSkqQuQ0KS1GVISJK6DAlJUpchIUnqMiQkSV2GhCSpy5CQJHUZEpKkLkNCktRlSEiSugwJSVKXISFJ6jIkJEldhoQkqcuQkCR1GRKSpC5DQpLUZUhIkroMCUlSlyEhSeqaMSSSHJ/k80nuTHJHkre1+vOTbE1yV7s/otWT5P1JdiS5Lckrh7a1to2/K8naofqrktze1nl/kkzXQ5I0HrPZk3gC+HdV9WJgJXBhkhOA9cD1VbUcuL7NA5wBLG+3dcBlMHjBBy4CTgZOAi4aetG/rI3dvd7qVu/1kCSNwYwhUVX3V9UX2/RjwJ3AccAaYFMbtgk4q02vAa6ogZuAxUmOBU4HtlbVrqp6BNgKrG7LDquqL1RVAVdM2daoHpKkMdijcxJJlgGvAG4Gjqmq+2EQJMDRbdhxwL1Dq0222nT1yRF1pukx9XGtSzKRZGLnzp178pQkSdOYdUgkeS7wZ8DvVNV3phs6olZzqM9aVW2oqhVVtWLJkiV7sqokaRqzCokkz2QQEB+rqj9v5QfaoSLa/YOtPgkcP7T6UuC+GepLR9Sn6yFJGoPZXN0U4HLgzqr6r0OLNgO7r1BaC1wzVD+vXeW0Eni0HSraAqxKckQ7Yb0K2NKWPZZkZet13pRtjeohSRqDRbMYcwrwG8DtSba32ruAi4GrklwA3AOc3ZZdC5wJ7AAeB84HqKpdSd4DbGvj3l1Vu9r0m4CPAIcA17Ub0/SQJI3BjCFRVX/D6PMGAKeNGF/AhZ1tbQQ2jqhPAC8dUX94VA9J0nj4iWtJUpchIUnqMiQkSV2GhCSpy5CQJHUZEpKkLkNCktRlSEiSugwJSVKXISFJ6jIkJEldhoQkqcuQkCR1GRKSpC5DQpLUZUhIkroMCUlSlyEhSeoyJCRJXYaEJKnLkJAkdRkSkqQuQ0KS1GVISJK6ZgyJJBuTPJjky0O15yfZmuSudn9EqyfJ+5PsSHJbklcOrbO2jb8rydqh+quS3N7WeX+STNdDkjQ+s9mT+AiwekptPXB9VS0Hrm/zAGcAy9ttHXAZDF7wgYuAk4GTgIuGXvQva2N3r7d6hh6SpDGZMSSq6q+BXVPKa4BNbXoTcNZQ/YoauAlYnORY4HRga1XtqqpHgK3A6rbssKr6QlUVcMWUbY3qIUkak7mekzimqu4HaPdHt/pxwL1D4yZbbbr65Ij6dD1+TJJ1SSaSTOzcuXOOT0mSNNV8n7jOiFrNob5HqmpDVa2oqhVLlizZ09UlSR1zDYkH2qEi2v2DrT4JHD80bilw3wz1pSPq0/WQJI3JXENiM7D7CqW1wDVD9fPaVU4rgUfboaItwKokR7QT1quALW3ZY0lWtquazpuyrVE9JEljsmimAUn+FDgVOCrJJIOrlC4GrkpyAXAPcHYbfi1wJrADeBw4H6CqdiV5D7CtjXt3Ve0+Gf4mBldQHQJc125M00OSNCYzhkRVndtZdNqIsQVc2NnORmDjiPoE8NIR9YdH9ZAkjY+fuJYkdRkSkqQuQ0KS1GVISJK6DAlJUpchIUnqMiQkSV2GhCSpy5CQJHUZEpKkLkNCktRlSEiSugwJSVKXISFJ6jIkJEldhoQkqcuQkCR1GRKSpC5DQpLUZUhIkroMCUlSlyEhSeoyJCRJXYaEJKlrvw+JJKuTfC3JjiTr9/XjkaQDyX4dEkkOAj4AnAGcAJyb5IR9+6gk6cCxX4cEcBKwo6rurqofAFcCa/bxY5KkA0aqal8/hq4krwdWV9VvtfnfAE6uqrdMGbcOWNdmfxb42hzaHQU8tBcP1377ppf97Ge/+en3gqpaMrW4aO8fz4LKiNqPpVpVbQA27FWjZKKqVuzNNuw3/l72s5/9Frbf/n64aRI4fmh+KXDfPnosknTA2d9DYhuwPMkLkxwMnANs3sePSZIOGPv14aaqeiLJW4AtwEHAxqq6Y4Ha7dXhKvvts172s5/9FrDffn3iWpK0b+3vh5skSfuQISFJ6jIkJEldhsQYJPm5JKclee6U+uoF6ndSkn/Rpk9I8vYkZy5Er07/K8bY6+fb81u1QNs/OclhbfqQJH+U5C+SXJLk8AXo99Ykx888ct76HZzkvCSvafNvSPI/klyY5JkL1PNFSf59kkuT/Jck/3Yh/iw1PzxxPUWS86vqw/O4vbcCFwJ3AicCb6uqa9qyL1bVK+erV9vmRQy+62oRsBU4GbgReA2wpareO8/9pl6SHOCXgBsAqupX5rnfLVV1Upv+Nwz+bD8JrAL+oqounud+dwAvb1fabQAeB64GTmv1fzXP/R4Fvgd8HfhT4BNVtXM+e0zp9zEG/1YOBb4NPBf4cwbPL1W1dp77vRX4l8BfAWcC24FHgF8F3lxVN85nP82DqvI2dAPumeft3Q48t00vAyYYBAXAlxbg8d/O4HLhQ4HvAIe1+iHAbQvQ74vA/wROBX6x3d/fpn9xAfp9aWh6G7CkTT8HuH0B+t05/FynLNu+EM+PwR7+KuByYCfwWWAt8LwF6Hdbu18EPAAc1OazQP9ebh/qcShwY5v+yQX6/3A4cDHwVeDhdruz1RbPd78ZHst1C7DNw4D/AHwUeMOUZR+cjx779eckFkqS23qLgGPmud1BVfVdgKr6ZpJTgauTvIDRXzuyt56oqieBx5N8vaq+03r/fZIfLkC/FcDbgN8Hfreqtif5+6r6qwXoBfCMJEcweCFNtXfZVfW9JE8sQL8vD+1d/l2SFVU1keRngH9cgH5VVT8EPgd8rh3yOQM4F/jPwI99t85eekb7oOpzGLxoHw7sAp4FLMjhJgaB9GTr8TyAqrpngQ5vXcVgr/bUqvoWQJKfYBC6nwBeO5/NkvSODITBkYT59mHgLuDPgDcm+TUGYfF9YOV8NDggQ4JBEJzOYDd3WID/Nc+9vpXkxKraDlBV303yy8BG4J/Pcy+AHyQ5tKoeB161u9iO+c57SLQXtPcl+US7f4CF/Xd1OHArg7+rSvITVfWtdr5nIUL3t4BLk/wBgy9N+0KSe4F727L59iPPoar+kcG3DGxOcsgC9LucwbvsgxgE/SeS3M3gBebKBej3IWBbkpuAXwAuAUiyhEE4zbdlVXXJcKGFxSVJ3rgA/bYxOJQ26t/i4gXo96Kq+rU2/akkvw/ckGTeDvMekOckklwOfLiq/mbEsj+pqjfMY6+lDN7df2vEslOq6m/nq1fb5rPau4ip9aOAY6vq9vnsN6LP64BTqupdC9lnRN9DgWOq6hsLtP3nAT/FIAAnq+qBBerzM1X1vxdi29P0/GcAVXVfksUMzl/dU1W3LFC/lwAvBr5cVV9diB5DvT4H/CWwafffWZJjgN8EXltVr5nnfl8GfrWq7hqx7N6qmteLEpLcCbykvVnbXVsL/B6Dw9wv2OseB2JISDowtEOT6xn8Ds3RrfwAg72zi6tq6tGEve33egbnxn7s5wqSnFVVn5rnfv8R+FxV/eWU+mrgv1fV8r3uYUhIOhDN95WMT9d+hoSkA1KSe6rqJ+03vQP1xLWkA8CYr2R8WvYzJCQ9nY3zSsanZT9DQtLT2acZXOWzfeqCJDfab2aek5AkdfkFf5KkLkNCktRlSEh7KEkl+ejQ/KIkO5N8eo7bW5zkzUPzp851W9J8MySkPfc94KVD36X0WuD/7sX2FgNvnnGUtA8YEtLcXAe8rk2fy+C3HwBI8vwkn0pyW5Kbkrys1f8wycYkNya5u/22Agy+tvpFSbYn+U+t9twkVyf5apKPJVmILy+UZmRISHNzJXBOkmcDLwNuHlr2Rwx+G+FlwLuA4V/q+zkG17WfBFzUvh57PfD1qjqxqn63jXsF8DvACQy+WPCUhXwyUo8hIc1BVd3G4EekzgWunbL45xn8CAxVdQNw5NDPc36mqr5fVQ8BD9L/VOwtVTXZvt1ze+sljZ0fppPmbjODHwI6FThyqD7q0NDuDyQNf437k/T/D852nLSg3JOQ5m4j8O4Rv9Hx18Cvw+BKJeCh3b8Q2PEY7RfapP2N706kOaqqSeDSEYv+EPhw+/K1xxn8VOZ023k4yd+2H6y5DvjMfD9Waa78Wg5JUpeHmyRJXYaEJKnLkJAkdRkSkqQuQ0KS1GVISJK6DAlJUpchIUnq+n/UCosaMOGa1gAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plt.subplot(2,2,2)\n",
    "# Show how number of flights changes through time - On Monthly Basis\n",
    "\n",
    "monthlyData=flights_df.groupby(['Month'])['FlightNum'].count()\n",
    "monthlyData.plot(kind='bar')\n",
    "\n",
    "monthlyDataSort=flights_df.groupby(['Month'])['FlightNum'].count().sort_values(ascending=True)\n",
    "monthlyDataBotDay=monthlyDataSort.iloc[:1]\n",
    "\n",
    "print(\"The least month is \")\n",
    "monthlyDataBotDay\n",
    "\n",
    "\n",
    "print(\"1st statement seems true\")\n",
    "print(\"2nd statement seems wrong, as the least on is on day 6 which is Saturday\")\n",
    "print(\"3rd statement seems true\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**7. Examine the distribution of cancellation reasons with time. Make a bar plot of cancellation reasons aggregated by months.**\n",
    "\n",
    "**Choose all correct statements:**\n",
    "- December has the highest rate of cancellations due to weather. \n",
    "- The highest rate of cancellations in September is due to Security reasons.\n",
    "- April's top cancellation reason is carriers.\n",
    "- Flights cancellations due to National Air System are more frequent than those due to carriers."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 1080x720 with 0 Axes>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x21da70bcb88>"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "Month  CancellationCode\n",
       "12     B                   10042\n",
       "Name: CancellationCode, dtype: int64"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>CancellationCode</th>\n",
       "      <th>A</th>\n",
       "      <th>B</th>\n",
       "      <th>C</th>\n",
       "      <th>D</th>\n",
       "      <th>All</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Month</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6635</td>\n",
       "      <td>6711</td>\n",
       "      <td>3962</td>\n",
       "      <td>0</td>\n",
       "      <td>17308</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>6090</td>\n",
       "      <td>10034</td>\n",
       "      <td>4470</td>\n",
       "      <td>2</td>\n",
       "      <td>20596</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6038</td>\n",
       "      <td>7520</td>\n",
       "      <td>2621</td>\n",
       "      <td>4</td>\n",
       "      <td>16183</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7312</td>\n",
       "      <td>1479</td>\n",
       "      <td>1564</td>\n",
       "      <td>0</td>\n",
       "      <td>10355</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>3157</td>\n",
       "      <td>1461</td>\n",
       "      <td>1608</td>\n",
       "      <td>3</td>\n",
       "      <td>6229</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>4251</td>\n",
       "      <td>3448</td>\n",
       "      <td>3232</td>\n",
       "      <td>0</td>\n",
       "      <td>10931</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>5292</td>\n",
       "      <td>2612</td>\n",
       "      <td>2694</td>\n",
       "      <td>0</td>\n",
       "      <td>10598</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>3852</td>\n",
       "      <td>3582</td>\n",
       "      <td>2401</td>\n",
       "      <td>0</td>\n",
       "      <td>9835</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2246</td>\n",
       "      <td>6478</td>\n",
       "      <td>1188</td>\n",
       "      <td>1</td>\n",
       "      <td>9913</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2097</td>\n",
       "      <td>600</td>\n",
       "      <td>552</td>\n",
       "      <td>0</td>\n",
       "      <td>3249</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>2510</td>\n",
       "      <td>937</td>\n",
       "      <td>1009</td>\n",
       "      <td>2</td>\n",
       "      <td>4458</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>4850</td>\n",
       "      <td>10042</td>\n",
       "      <td>2887</td>\n",
       "      <td>0</td>\n",
       "      <td>17779</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>All</th>\n",
       "      <td>54330</td>\n",
       "      <td>54904</td>\n",
       "      <td>28188</td>\n",
       "      <td>12</td>\n",
       "      <td>137434</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "CancellationCode      A      B      C   D     All\n",
       "Month                                            \n",
       "1                  6635   6711   3962   0   17308\n",
       "2                  6090  10034   4470   2   20596\n",
       "3                  6038   7520   2621   4   16183\n",
       "4                  7312   1479   1564   0   10355\n",
       "5                  3157   1461   1608   3    6229\n",
       "6                  4251   3448   3232   0   10931\n",
       "7                  5292   2612   2694   0   10598\n",
       "8                  3852   3582   2401   0    9835\n",
       "9                  2246   6478   1188   1    9913\n",
       "10                 2097    600    552   0    3249\n",
       "11                 2510    937   1009   2    4458\n",
       "12                 4850  10042   2887   0   17779\n",
       "All               54330  54904  28188  12  137434"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1st statement is true\n",
      "2nd statement is false\n",
      "3rd statement is true\n",
      "4th statement is false\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#monthlyCancelData=flights_df.groupby(['Month','CancellationCode'])['CancellationCode'].count()\n",
    "# monthlyCancelData\n",
    "plt.figure(figsize=(15,10))\n",
    "sns.countplot(x='Month', hue='CancellationCode', data=flights_df)\n",
    "# monthlyCancelData.plot(kind='bar')\n",
    "\n",
    "monthlyCancelDataSort=flights_df[flights_df['CancellationCode'] == 'B'].groupby(['Month', 'CancellationCode'])['CancellationCode'].count().sort_values(ascending=False)\n",
    "monthlyCancelDataTopMonth=monthlyCancelDataSort.iloc[:1]\n",
    "\n",
    "monthlyCancelDataTopMonth\n",
    "\n",
    "# Overall Analysis\n",
    "cancelAnalysis = pd.crosstab(flights_df['Month'], flights_df['CancellationCode'], margins=True)\n",
    "cancelAnalysis\n",
    "\n",
    "\n",
    "print(\"1st statement is true\")\n",
    "print(\"2nd statement is false\")\n",
    "print(\"3rd statement is true\")\n",
    "print(\"4th statement is false\") "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**8. Which month has the greatest number of cancellations due to Carrier?** \n",
    "- May\n",
    "- January\n",
    "- September\n",
    "- April "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Month\n",
       "4     7312\n",
       "1     6635\n",
       "2     6090\n",
       "3     6038\n",
       "7     5292\n",
       "12    4850\n",
       "6     4251\n",
       "8     3852\n",
       "5     3157\n",
       "11    2510\n",
       "9     2246\n",
       "10    2097\n",
       "Name: CancellationCode, dtype: int64"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# You code here\n",
    "flights_df[flights_df['CancellationCode']=='A'].groupby(['Month'])['CancellationCode'].count().sort_values(ascending=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**9. Identify the carrier with the greatest number of cancellations due to carrier in the corresponding month from the previous question.**\n",
    "\n",
    "- 9E\n",
    "- EV\n",
    "- HA\n",
    "- AA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "UniqueCarrier\n",
       "AA    3696\n",
       "Name: CancellationCode, dtype: int64"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# You code here\n",
    "flights_df[(flights_df['Month']==4) & (flights_df['CancellationCode'] == 'A')].groupby(['UniqueCarrier'])['CancellationCode'].size().sort_values(ascending=False).iloc[:1]\n",
    "#flights_df[(flights_df['Month']==4) & (flights_df['CancellationCode'] == 'A')].groupby(['UniqueCarrier'])['CancellationCode'].count()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**10. Examine median arrival and departure delays (in time) by carrier. Which carrier has the lowest median delay time for both arrivals and departures? Leave only non-negative values of delay times ('ArrDelay', 'DepDelay').\n",
    "[Boxplots](https://seaborn.pydata.org/generated/seaborn.boxplot.html) can be helpful in this exercise, as well as it might be a good idea to remove outliers in order to build nice graphs. You can exclude delay time values higher than a corresponding .95 percentile.**\n",
    "\n",
    "- EV\n",
    "- OO\n",
    "- AA\n",
    "- AQ "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Year</th>\n",
       "      <th>Month</th>\n",
       "      <th>DayofMonth</th>\n",
       "      <th>DayOfWeek</th>\n",
       "      <th>DepTime</th>\n",
       "      <th>UniqueCarrier</th>\n",
       "      <th>FlightNum</th>\n",
       "      <th>ArrDelay</th>\n",
       "      <th>DepDelay</th>\n",
       "      <th>Origin</th>\n",
       "      <th>...</th>\n",
       "      <th>Cancelled</th>\n",
       "      <th>CancellationCode</th>\n",
       "      <th>CarrierDelay</th>\n",
       "      <th>WeatherDelay</th>\n",
       "      <th>NASDelay</th>\n",
       "      <th>SecurityDelay</th>\n",
       "      <th>LateAircraftDelay</th>\n",
       "      <th>Date</th>\n",
       "      <th>Week</th>\n",
       "      <th>TotalDelay</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2008</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>754.0</td>\n",
       "      <td>WN</td>\n",
       "      <td>3231</td>\n",
       "      <td>2.0</td>\n",
       "      <td>19.0</td>\n",
       "      <td>IAD</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2008-01-03</td>\n",
       "      <td>1</td>\n",
       "      <td>21.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2008</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>628.0</td>\n",
       "      <td>WN</td>\n",
       "      <td>448</td>\n",
       "      <td>14.0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>IND</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2008-01-03</td>\n",
       "      <td>1</td>\n",
       "      <td>22.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2008</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>1829.0</td>\n",
       "      <td>WN</td>\n",
       "      <td>3920</td>\n",
       "      <td>34.0</td>\n",
       "      <td>34.0</td>\n",
       "      <td>IND</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>2008-01-03</td>\n",
       "      <td>1</td>\n",
       "      <td>68.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2008</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>1940.0</td>\n",
       "      <td>WN</td>\n",
       "      <td>378</td>\n",
       "      <td>11.0</td>\n",
       "      <td>25.0</td>\n",
       "      <td>IND</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2008-01-03</td>\n",
       "      <td>1</td>\n",
       "      <td>36.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2008</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>1937.0</td>\n",
       "      <td>WN</td>\n",
       "      <td>509</td>\n",
       "      <td>57.0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>IND</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>47.0</td>\n",
       "      <td>2008-01-03</td>\n",
       "      <td>1</td>\n",
       "      <td>124.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows Ã— 22 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Year  Month  DayofMonth  DayOfWeek  DepTime UniqueCarrier  FlightNum  \\\n",
       "1  2008      1           3          4    754.0            WN       3231   \n",
       "2  2008      1           3          4    628.0            WN        448   \n",
       "4  2008      1           3          4   1829.0            WN       3920   \n",
       "5  2008      1           3          4   1940.0            WN        378   \n",
       "6  2008      1           3          4   1937.0            WN        509   \n",
       "\n",
       "   ArrDelay  DepDelay Origin  ... Cancelled  CancellationCode  CarrierDelay  \\\n",
       "1       2.0      19.0    IAD  ...         0               NaN           NaN   \n",
       "2      14.0       8.0    IND  ...         0               NaN           NaN   \n",
       "4      34.0      34.0    IND  ...         0               NaN           2.0   \n",
       "5      11.0      25.0    IND  ...         0               NaN           NaN   \n",
       "6      57.0      67.0    IND  ...         0               NaN          10.0   \n",
       "\n",
       "  WeatherDelay  NASDelay  SecurityDelay  LateAircraftDelay       Date  Week  \\\n",
       "1          NaN       NaN            NaN                NaN 2008-01-03     1   \n",
       "2          NaN       NaN            NaN                NaN 2008-01-03     1   \n",
       "4          0.0       0.0            0.0               32.0 2008-01-03     1   \n",
       "5          NaN       NaN            NaN                NaN 2008-01-03     1   \n",
       "6          0.0       0.0            0.0               47.0 2008-01-03     1   \n",
       "\n",
       "  TotalDelay  \n",
       "1       21.0  \n",
       "2       22.0  \n",
       "4       68.0  \n",
       "5       36.0  \n",
       "6      124.0  \n",
       "\n",
       "[5 rows x 22 columns]"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "After taking the negative values out, we get the following.\n",
      "But missing values are not removed from the data frame, as the question did not require that...\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ArrDelay</th>\n",
       "      <th>DepDelay</th>\n",
       "      <th>TotalDelay</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>UniqueCarrier</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>9E</th>\n",
       "      <td>23.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>43.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AA</th>\n",
       "      <td>25.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>47.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AQ</th>\n",
       "      <td>6.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>11.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>AS</th>\n",
       "      <td>18.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>34.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>B6</th>\n",
       "      <td>31.0</td>\n",
       "      <td>27.0</td>\n",
       "      <td>58.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CO</th>\n",
       "      <td>19.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>36.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DL</th>\n",
       "      <td>19.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>33.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>EV</th>\n",
       "      <td>23.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>43.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>F9</th>\n",
       "      <td>14.0</td>\n",
       "      <td>12.0</td>\n",
       "      <td>26.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>FL</th>\n",
       "      <td>20.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>37.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>HA</th>\n",
       "      <td>9.0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>16.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MQ</th>\n",
       "      <td>23.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>45.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>NW</th>\n",
       "      <td>22.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>37.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>OH</th>\n",
       "      <td>18.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>30.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>OO</th>\n",
       "      <td>20.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>36.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>UA</th>\n",
       "      <td>25.0</td>\n",
       "      <td>24.0</td>\n",
       "      <td>49.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>US</th>\n",
       "      <td>19.0</td>\n",
       "      <td>16.0</td>\n",
       "      <td>35.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>WN</th>\n",
       "      <td>14.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>29.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>XE</th>\n",
       "      <td>24.0</td>\n",
       "      <td>21.0</td>\n",
       "      <td>45.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>YV</th>\n",
       "      <td>20.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>37.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               ArrDelay  DepDelay  TotalDelay\n",
       "UniqueCarrier                                \n",
       "9E                 23.0      21.0        43.0\n",
       "AA                 25.0      22.0        47.0\n",
       "AQ                  6.0       5.0        11.0\n",
       "AS                 18.0      16.0        34.0\n",
       "B6                 31.0      27.0        58.0\n",
       "CO                 19.0      17.0        36.0\n",
       "DL                 19.0      15.0        33.0\n",
       "EV                 23.0      21.0        43.0\n",
       "F9                 14.0      12.0        26.0\n",
       "FL                 20.0      17.0        37.0\n",
       "HA                  9.0       7.0        16.0\n",
       "MQ                 23.0      22.0        45.0\n",
       "NW                 22.0      16.0        37.0\n",
       "OH                 18.0      11.0        30.0\n",
       "OO                 20.0      17.0        36.0\n",
       "UA                 25.0      24.0        49.0\n",
       "US                 19.0      16.0        35.0\n",
       "WN                 14.0      15.0        29.0\n",
       "XE                 24.0      21.0        45.0\n",
       "YV                 20.0      18.0        37.0"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ArrDelay</th>\n",
       "      <th>DepDelay</th>\n",
       "      <th>TotalDelay</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>UniqueCarrier</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>AQ</th>\n",
       "      <td>6.0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>11.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               ArrDelay  DepDelay  TotalDelay\n",
       "UniqueCarrier                                \n",
       "AQ                  6.0       5.0        11.0"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 1080x504 with 0 Axes>"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x21e52040f88>"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "After removing values higher than 0.95 Percentile we have the following figure for Arrival Delay\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 1080x504 with 0 Axes>"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x21e520565c8>"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Examine median arrival \n",
    "#print(\"Prior to taking the negative values out\")\n",
    "#medianInfo=flights_df.groupby(['UniqueCarrier'])['ArrDelay','DepDelay'].median()\n",
    "#medianInfo\n",
    "\n",
    "#lowestMedDelay=medianInfo.sort_values(by=['ArrDelay','DepDelay'],ascending=True).iloc[:1]\n",
    "#lowestMedDelay\n",
    "\n",
    "# Leave only non-negative values\n",
    "posIndex=flights_df[(flights_df['ArrDelay'] < 0.0) | (flights_df['DepDelay'] < 0.0)].index\n",
    "posFlights_df=flights_df.drop(posIndex)\n",
    "\n",
    "#posFlights_df[posFlights_df['ArrDelay'].isnull()]\n",
    "\n",
    "posFlights_df['TotalDelay']=posFlights_df['ArrDelay'] + posFlights_df['DepDelay']\n",
    "#posFlights_df[posFlights_df['TotalDelay'].isnull()]\n",
    "posFlights_df.head()\n",
    "\n",
    "# Show the positive data \n",
    "print(\"After taking the negative values out, we get the following.\") \n",
    "print(\"But missing values are not removed from the data frame, as the question did not require that...\")\n",
    "\n",
    "posMedianInfo=posFlights_df.groupby(['UniqueCarrier'])['ArrDelay','DepDelay','TotalDelay'].median()\n",
    "posMedianInfo\n",
    "\n",
    "posLowestMedDelay=posMedianInfo.sort_values(by=['TotalDelay'],ascending=True).iloc[:1]\n",
    "posLowestMedDelay\n",
    "\n",
    "#posFlights_df.groupby(['UniqueCarrier']).agg({'ArrDelay': [np.median], 'DepDelay': [np.median] }).\\\n",
    "#sort_values(by=['ArrDelay','DepDelay'],ascending=True).iloc[0:1]\n",
    "\n",
    "\n",
    "# Box Plot - Arr Delay\n",
    "plt.figure(figsize=(15,7))\n",
    "sns.boxplot(y='UniqueCarrier', x='ArrDelay', data=posFlights_df)\n",
    "# Box Plot - Dep Delay\n",
    "#sns.boxplot(y='UniqueCarrier', x='DepDelay', data=posFlights_df)\n",
    "\n",
    "# Box Plot, how to show both?\n",
    "\n",
    "# Exclude Delay Time Values higher than corresponding 0.95 Percentile\n",
    "# qArr=posFlights_df['ArrDelay'].quantile()\n",
    "qPosFlights_df = posFlights_df[(posFlights_df['ArrDelay'] <= posFlights_df['ArrDelay'].quantile(.95)) & (posFlights_df['DepDelay'] <= posFlights_df['DepDelay'].quantile(.95))]\n",
    "\n",
    "print(\"After removing values higher than 0.95 Percentile we have the following figure for Arrival Delay\")\n",
    "plt.figure(figsize=(15,7))\n",
    "sns.boxplot(y='UniqueCarrier', x='ArrDelay', data=qPosFlights_df)\n",
    "#print(\"Now Dep Delay\")\n",
    "#sns.boxplot(y='UniqueCarrier', x='DepDelay', data=qPosFlights_df)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 1080x504 with 0 Axes>"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1bf648ff548>"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Now Dep Delay\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1bf648ff548>"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15,7))\n",
    "# Box Plot - Dep Delay\n",
    "print(\"Before removing values higher than 0.95 Percentile we have the following for Departure Delay\")\n",
    "sns.boxplot(y='UniqueCarrier', x='DepDelay', data=posFlights_df)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 1080x504 with 0 Axes>"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "After removing values higher than 0.95 Percentile we have the following for Departure Delay\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1bf65cbc388>"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(15,7))\n",
    "\n",
    "print(\"After removing values higher than 0.95 Percentile we have the following for Departure Delay\")\n",
    "\n",
    "sns.boxplot(y='UniqueCarrier', x='DepDelay', data=qPosFlights_df)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Please uncomment the following to see the plot - I had difficulty uploading to github as the size was big\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "\"\\ntrace1= go.Box(\\n y=qPosFlights_df['DepDelay'],\\n x=qPosFlights_df['UniqueCarrier'],\\n name = 'Departure Delay'\\n )\\n\\ntrace2= go.Box(\\n y=qPosFlights_df['ArrDelay'],\\n x=qPosFlights_df['UniqueCarrier'],\\n name='Arrival Delay'   \\n )\\n\\ndata =  [trace1,trace2]\\niplot(data)\\n\""
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(\"Please uncomment the following to see the plot - I had difficulty uploading to github as the size was big\")\n",
    "\n",
    "'''\n",
    "trace1= go.Box(\n",
    " y=qPosFlights_df['DepDelay'],\n",
    " x=qPosFlights_df['UniqueCarrier'],\n",
    " name = 'Departure Delay'\n",
    " )\n",
    "\n",
    "trace2= go.Box(\n",
    " y=qPosFlights_df['ArrDelay'],\n",
    " x=qPosFlights_df['UniqueCarrier'],\n",
    " name='Arrival Delay'   \n",
    " )\n",
    "\n",
    "data =  [trace1,trace2]\n",
    "iplot(data)\n",
    "'''\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
